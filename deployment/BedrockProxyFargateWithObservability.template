Description: Bedrock Access Gateway - OpenAI-compatible RESTful APIs for Amazon Bedrock with enhanced features

Mappings:
  ELBAccountIdMap:
    us-east-1:
      AccountId: '127311923021'  # US East (N. Virginia)
    us-east-2:
      AccountId: '033677994240'  # US East (Ohio)
    us-west-1:
      AccountId: '027434742980'  # US West (N. California)
    us-west-2:
      AccountId: '797873946194'  # US West (Oregon)
    af-south-1:
      AccountId: '098369216593'  # Africa (Cape Town)
    ap-east-1:
      AccountId: '754344448648'  # Asia Pacific (Hong Kong)
    ap-south-2:
      AccountId: '589379963580'  # Asia Pacific (Jakarta)
    ap-south-1:
      AccountId: '718504428378'  # Asia Pacific (Mumbai)
    ap-northeast-3:
      AccountId: '383597477331'  # Asia Pacific (Osaka)
    ap-northeast-2:
      AccountId: '600734575887'  # Asia Pacific (Seoul)
    ap-southeast-1:
      AccountId: '114774131450'  # Asia Pacific (Singapore)
    ap-southeast-2:
      AccountId: '783225319266'  # Asia Pacific (Sydney)
    ap-northeast-1:
      AccountId: '582318560864'  # Asia Pacific (Tokyo)
    ca-central-1:
      AccountId: '985666609251'  # Canada (Central)
    eu-central-1:
      AccountId: '054676820928'  # Europe (Frankfurt)
    eu-west-1:
      AccountId: '156460612806'  # Europe (Ireland)
    eu-west-2:
      AccountId: '652711504416'  # Europe (London)
    eu-south-1:
      AccountId: '635631232127'  # Europe (Milan)
    eu-west-3:
      AccountId: '009996457667'  # Europe (Paris)
    eu-north-1:
      AccountId: '897822967062'  # Europe (Stockholm)
    me-south-1:
      AccountId: '076674570225'  # Middle East (Bahrain)
    sa-east-1:
      AccountId: '507241528517'  # South America (SÃ£o Paulo)

Parameters:

  EnableContainerInsightsWithEnhancedObservability:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Enable Container Insights with enhanced observability for the ECS cluster and tasks. This provides additional monitoring and insights into your containerized applications and infrastructure.

  EnableALBAccessLogging:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Enable access logging for the Application Load Balancer (ALB). Access logs capture detailed information about requests sent to the ALB, which can be useful for troubleshooting and monitoring purposes.

  EnableCloudWatchAlarms:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Enable CloudWatch alarms for monitoring the ECS service. If enabled, you must provide an SNS topic ARN to receive alarm notifications. Additionally, EnableContainerInsightsWithEnhancedObservability must be set to true to enable enhanced monitoring capabilities for containers.

  SNSTopicArn:
    Type: String
    Default: ''
    Description: The ARN of the SNS topic to receive CloudWatch alarm notifications. Required if EnableCloudWatchAlarms is set to 'true'.

  EnableECSServiceAutoScaling:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Enable Auto Scaling for the ECS service. This allows the service to automatically scale the number of tasks based on CPU utilization.
  ApiKeySecretArn:
    Type: String
    AllowedPattern: ^arn:aws:secretsmanager:.*$
    Description: The secret ARN in Secrets Manager used to store the API Key
  DefaultModelId:
    Type: String
    Default: anthropic.claude-3-sonnet-20240229-v1:0
    Description: The default model ID, please make sure the model ID is supported in the current region
Conditions:
  EnableALBAccessLogging: !Equals [!Ref EnableALBAccessLogging, 'true']
  EnableContainerInsightsWithEnhancedObservability: !Equals [!Ref EnableContainerInsightsWithEnhancedObservability, 'true']
  EnableCloudWatchAlarms: !And 
    - !Equals [!Ref EnableCloudWatchAlarms, 'true']
    - !Not [!Equals [!Ref SNSTopicArn, '']]
  EnableECSServiceAutoScaling: !Equals [!Ref EnableECSServiceAutoScaling, 'true']

Resources:
  VPCB9E5F0B4:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.250.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: BedrockProxy/VPC  
  VPCPublicSubnet1SubnetB4246D30:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.250.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: BedrockProxyFargate/VPC/PublicSubnet1
      VpcId:
        Ref: VPCB9E5F0B4
  VPCPublicSubnet1RouteTableFEE4B781:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: BedrockProxyFargate/VPC/PublicSubnet1
      VpcId:
        Ref: VPCB9E5F0B4
  VPCPublicSubnet1RouteTableAssociation0B0896DC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPublicSubnet1RouteTableFEE4B781
      SubnetId:
        Ref: VPCPublicSubnet1SubnetB4246D30
  VPCPublicSubnet1DefaultRoute91CEF279:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGWB7E252D3
      RouteTableId:
        Ref: VPCPublicSubnet1RouteTableFEE4B781
    DependsOn:
      - VPCVPCGW99B986DC
  VPCPublicSubnet2Subnet74179F39:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.250.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: BedrockProxyFargate/VPC/PublicSubnet2
      VpcId:
        Ref: VPCB9E5F0B4
  VPCPublicSubnet2RouteTable6F1A15F1:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: BedrockProxyFargate/VPC/PublicSubnet2
      VpcId:
        Ref: VPCB9E5F0B4
  VPCPublicSubnet2RouteTableAssociation5A808732:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPublicSubnet2RouteTable6F1A15F1
      SubnetId:
        Ref: VPCPublicSubnet2Subnet74179F39
  VPCPublicSubnet2DefaultRouteB7481BBA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGWB7E252D3
      RouteTableId:
        Ref: VPCPublicSubnet2RouteTable6F1A15F1
    DependsOn:
      - VPCVPCGW99B986DC
  VPCIGWB7E252D3:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: BedrockProxyFargate/VPC
  VPCVPCGW99B986DC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: VPCIGWB7E252D3
      VpcId:
        Ref: VPCB9E5F0B4
  ProxyExecRole6947A5BE:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
  ProxyExecRoleDefaultPolicyED41DFE7:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
          - Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Effect: Allow
            Resource:
              Ref: ApiKeySecretArn
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:ecr:"
                  - Ref: AWS::Region
                  - :366590864501:repository/bedrock-proxy-api-ecs
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: ProxyExecRoleDefaultPolicyED41DFE7
      Roles:
        - Ref: ProxyExecRole6947A5BE
  ProxyTaskRole5DB6A540:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
  ProxyTaskRoleDefaultPolicy933321B8:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - bedrock:ListFoundationModels
              - bedrock:ListInferenceProfiles
            Effect: Allow
            Resource: "*"
          - Action:
              - bedrock:InvokeModel
              - bedrock:InvokeModelWithResponseStream
            Effect: Allow
            Resource:
              - arn:aws:bedrock:*::foundation-model/*
              - arn:aws:bedrock:*:*:inference-profile/*
        Version: "2012-10-17"
      PolicyName: ProxyTaskRoleDefaultPolicy933321B8
      Roles:
        - Ref: ProxyTaskRole5DB6A540
  ProxyBedrockCluster893F4261:
    Type: AWS::ECS::Cluster
  ProxyServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Condition: EnableECSServiceAutoScaling
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  ProxyServiceAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Condition: EnableECSServiceAutoScaling
    Properties:
      MaxCapacity: 20
      MinCapacity: 1
      ResourceId: !Join ['/', [service, !Ref ProxyBedrockCluster893F4261, !GetAtt ProxyApiService8651D882.Name]]
      RoleARN: !GetAtt ProxyServiceAutoScalingRole.Arn
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: ecs

  ProxyServiceAutoScalingPolicyTarget:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Condition: EnableECSServiceAutoScaling
    Properties:
      PolicyName: !Sub '${AWS::StackName}-ProxyServiceAutoScalingPolicy'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ProxyServiceAutoScalingPolicy
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70

  ProxyBedrockClusterD9C31EFF:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      Cluster:
        Ref: ProxyBedrockCluster893F4261
      DefaultCapacityProviderStrategy: []
  ProxyTaskDef9F2A72E5:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: DEBUG
              Value: "false"
            - Name: DEFAULT_MODEL
              Value:
                Ref: DefaultModelId
            - Name: DEFAULT_EMBEDDING_MODEL
              Value: cohere.embed-multilingual-v3
            - Name: ENABLE_CROSS_REGION_INFERENCE
              Value: "true"
            - !If
              - EnableContainerInsightsWithEnhancedObservability
              - Name: ECS_ENABLE_CONTAINER_METADATA
                Value: 'true'
              - !Ref AWS::NoValue
          Essential: true
          Image:
            Fn::Join:
              - ""
              - - 366590864501.dkr.ecr.
                - Ref: AWS::Region
                - "."
                - Ref: AWS::URLSuffix
                - /bedrock-proxy-api-ecs:latest
          Name: proxy-api
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
          Secrets:
            - Name: API_KEY
              ValueFrom:
                Fn::Join:
                  - ""
                  - - Ref: ApiKeySecretArn
                    - ":api_key::"
      Cpu: "1024"
      ExecutionRoleArn:
        Fn::GetAtt:
          - ProxyExecRole6947A5BE
          - Arn
      Family: BedrockProxyFargateProxyTaskDefCD902792
      Memory: "2048"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
      TaskRoleArn:
        Fn::GetAtt:
          - ProxyTaskRole5DB6A540
          - Arn
  ProxyApiService8651D882:
    Type: AWS::ECS::Service
    Properties:
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
      Cluster:
        Ref: ProxyBedrockCluster893F4261
      DeploymentConfiguration:
        Alarms:
          AlarmNames: []
          Enable: false
          Rollback: false
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LoadBalancers:
        - ContainerName: proxy-api
          ContainerPort: 80
          TargetGroupArn:
            Ref: ProxyALBListenerTargetsGroup187739FA
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::GetAtt:
                - ProxyApiServiceSecurityGroup51EBD9B8
                - GroupId
          Subnets:
            - Ref: VPCPublicSubnet1SubnetB4246D30
            - Ref: VPCPublicSubnet2Subnet74179F39
      TaskDefinition:
        Ref: ProxyTaskDef9F2A72E5
    DependsOn:
      - ProxyALBListener933E9515
      - ProxyALBListenerTargetsGroup187739FA
      - ProxyTaskRoleDefaultPolicy933321B8
      - ProxyTaskRole5DB6A540
  ProxyApiServiceSecurityGroup51EBD9B8:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: BedrockProxyFargate/Proxy/ApiService/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: VPCB9E5F0B4
    DependsOn:
      - ProxyTaskRoleDefaultPolicy933321B8
      - ProxyTaskRole5DB6A540
  ProxyApiServiceSecurityGroupfromBedrockProxyFargateProxyALBSecurityGroup9C12825880081F8FE2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Load balancer to target
      FromPort: 80
      GroupId:
        Fn::GetAtt:
          - ProxyApiServiceSecurityGroup51EBD9B8
          - GroupId
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
          - ProxyALBSecurityGroup0D6CA3DA
          - GroupId
      ToPort: 80
    DependsOn:
      - ProxyTaskRoleDefaultPolicy933321B8
      - ProxyTaskRole5DB6A540
  ALBAccessLogBucket:
    Type: AWS::S3::Bucket
    Condition: EnableALBAccessLogging 
    Properties:
      BucketName: !Sub '${AWS::AccountId}-${AWS::Region}-${AWS::StackName}-alb-logs'
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldLogs
            Status: Enabled
            ExpirationInDays: 30

  ALBAccessLogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: EnableALBAccessLogging
    Properties:
      Bucket: !Ref ALBAccessLogBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ALBAccessLogBucketPermissions
            Effect: Allow
            Principal:
              AWS: !Sub
                - 'arn:aws:iam::${ELBAccountId}:root'
                - ELBAccountId: !FindInMap [ELBAccountIdMap, !Ref 'AWS::Region', 'AccountId']
            Action: 's3:PutObject'
            Resource: !Sub 'arn:aws:s3:::${AWS::AccountId}-${AWS::Region}-${AWS::StackName}-alb-logs/*'

  ProxyALB87756780:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: 'false'
        - Key: idle_timeout.timeout_seconds
          Value: '600'
        - !If
          - EnableALBAccessLogging
          - Key: access_logs.s3.enabled
            Value: 'true'
          - !Ref AWS::NoValue
        - !If
          - EnableALBAccessLogging
          - Key: access_logs.s3.bucket
            Value: !Ref ALBAccessLogBucket
          - !Ref AWS::NoValue
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ProxyALBSecurityGroup0D6CA3DA
      Subnets:
        - !Ref VPCPublicSubnet1SubnetB4246D30
        - !Ref VPCPublicSubnet2Subnet74179F39
      Type: application
    DependsOn:
      - VPCPublicSubnet1DefaultRoute91CEF279
      - VPCPublicSubnet1RouteTableAssociation0B0896DC
      - VPCPublicSubnet2DefaultRouteB7481BBA
      - VPCPublicSubnet2RouteTableAssociation5A808732
  ProxyALBSecurityGroup0D6CA3DA:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB BedrockProxyFargateProxyALB481672E7
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: VPCB9E5F0B4
  ProxyALBSecurityGrouptoBedrockProxyFargateProxyApiServiceSecurityGroupDDA1C56480393D1E44:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - ProxyApiServiceSecurityGroup51EBD9B8
          - GroupId
      FromPort: 80
      GroupId:
        Fn::GetAtt:
          - ProxyALBSecurityGroup0D6CA3DA
          - GroupId
      IpProtocol: tcp
      ToPort: 80
  ProxyALBListener933E9515:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: ProxyALBListenerTargetsGroup187739FA
          Type: forward
      LoadBalancerArn:
        Ref: ProxyALB87756780
      Port: 80
      Protocol: HTTP
  ProxyALBListenerTargetsGroup187739FA:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /health
      HealthCheckTimeoutSeconds: 30
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: "false"
      TargetType: ip
      VpcId:
        Ref: VPCB9E5F0B4

  ProxyRunningTasksAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: EnableCloudWatchAlarms
    Properties:
      AlarmDescription: Alarm if there are no running tasks in the ECS cluster
      Namespace: ECS/ContainerInsights
      MetricName: TaskCount
      Dimensions:
        - Name: ClusterName
          Value: !Ref ProxyBedrockCluster893F4261
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref SNSTopicArn
      TreatMissingData: notBreaching

  ProxyPendingTasksAlarm:
    Type: AWS::CloudWatch::Alarm  
    Condition: EnableCloudWatchAlarms
    Properties:
      AlarmDescription: Alarm if there are pending tasks in the ECS cluster
      Namespace: ECS/ContainerInsights
      MetricName: PendingTaskCount
      Dimensions:
        - Name: ClusterName
          Value: !Ref ProxyBedrockCluster893F4261
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1  
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref SNSTopicArn
      TreatMissingData: notBreaching

Outputs:
  APIBaseUrl:
    Description: Proxy API Base URL (OPENAI_API_BASE)
    Value:
      Fn::Join:
        - ""
        - - http://
          - Fn::GetAtt:
              - ProxyALB87756780
              - DNSName
          - /api/v1
